// backend/prisma/schema.prisma - FINAL FIXED VERSION

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// 1. ENUMS - Add these at the top of your schema file after datasource
enum POStatus {
  DRAFT
  SENT
  CONFIRMED
  SHIPPED
  PARTIAL_RECEIVED
  RECEIVED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
}

enum LocationType {
  WAREHOUSE
  STORE
  FBA
  THIRD_PARTY_LOGISTICS
  CONSIGNMENT
}

enum QCStatus {
  PENDING
  PASSED
  FAILED
  PARTIAL
}

enum MovementType {
  RECEIPT
  SHIPMENT
  TRANSFER
  ADJUSTMENT
  RETURN
  DAMAGE
  EXPIRY
}

enum CountStatus {
  IN_PROGRESS
  COMPLETED
  APPROVED
  CANCELLED
}


model Channel {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  products  Product[]
  
  @@map("channels")
}

model Product {
  id                String    @id @default(cuid())
  channelId         String
  channel           Channel   @relation(fields: [channelId], references: [id])
  channelRef        String?
  sku               String
  title             String
  active            Boolean   @default(true)
  priceCents        Int?
  currency          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Inventory fields from your DB
  leadTimeDays      Int?      @default(30)
  moq               Int?      @default(100)
  batchSize         Int?      @default(50)
  safetyStockDays   Int?      @default(14)
  supplierName      String?
  supplierCountry   String?   @default("China")
  shippingMethod    String?   @default("Sea")
  
  inventory         Inventory?
  orderItems        OrderItem[]
  returnItems       ReturnItem[]
  supplierProducts  SupplierProduct[]
  poItems           POItem[]
  batches           InventoryBatch[]
  movements         InventoryMovement[]
  stockCountItems   StockCountItem[]
  reorderRules      ReorderRule[]
  
  @@unique([channelId, sku])
  @@index([sku])
  @@index([channelId])
  @@map("products")
}

model Order {
  id            String    @id @default(cuid())
  channelId     String
  channel       Channel   @relation(fields: [channelId], references: [id])
  channelRef    String
  number        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currency      String
  subtotalCents Int
  taxCents      Int
  shippingCents Int
  totalCents    Int
  customerEmail String?
  
  items         OrderItem[]
  returns       Return[]
  
  @@unique([channelId, channelRef])
  @@index([channelRef])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  sku         String?
  title       String
  quantity    Int
  priceCents  Int
  totalCents  Int
  
  returnItems ReturnItem[]
  
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Inventory {
  id                  String    @id @default(cuid())
  productId           String    @unique
  product             Product   @relation(fields: [productId], references: [id])
  quantity            Int       @default(0)
  updatedAt           DateTime  @updatedAt
  createdAt           DateTime  @default(now())
  
  // Map snake_case DB columns to camelCase for easier use in code
  available           Int?      @default(0) @map("available_quantity")
  reserved            Int?      @default(0) @map("reserved_quantity")
  incoming            Int?      @default(0) @map("incoming_quantity")
  reorderPoint        Int?      @default(20) @map("reorder_point")
  reorderQuantity     Int?      @default(100) @map("reorder_quantity")
  leadTimeDays        Int?      @default(7) @map("lead_time_days")
  safetyStock         Int?      @default(10) @map("safety_stock")
  lastRestockDate     DateTime? @map("last_restock_date")
  nextRestockDate     DateTime? @map("next_restock_date")
  minOrderQuantity    Int?      @default(1) @map("min_order_quantity")
  maxStockLevel       Int?      @map("max_stock_level")
  notes               String?
  
  @@index([productId])
  @@map("inventory")
}

model Return {
  id                       String      @id @default(cuid())
  returnNumber             String      @unique
  orderId                  String
  order                    Order       @relation(fields: [orderId], references: [id])
  channelId                String
  customerEmail            String?
  status                   String      @default("pending")
  totalReturnValueCents    Int         @default(0)
  refundAmountCents        Int?
  restockingFeeCents       Int         @default(0)
  returnShippingCostCents  Int         @default(0)
  returnlabelcostcents     Int         @default(0) @map("returnlabelcostcents")
  createdAt                DateTime    @default(now())
  approvedAt               DateTime?
  completedAt              DateTime?
  createdBy                String?
  approvedBy               String?
  notes                    String?
  totalActualLossCents  Int?     @default(0)  // Add this line
  
  items                    ReturnItem[]
  
  @@index([orderId])
  @@index([channelId])
  @@index([status])
  @@map("returns")
}

model ReturnItem {
  id                  String      @id @default(cuid())
  returnId            String
  return              Return      @relation(fields: [returnId], references: [id])
  orderItemId         String?
  orderItem           OrderItem?  @relation(fields: [orderItemId], references: [id])
  productId           String?
  product             Product?    @relation(fields: [productId], references: [id])
  sku                 String
  productTitle        String
  quantityReturned    Int
  quantityRestockable Int         @default(0)
  quantityDamaged     Int         @default(0)
  unitPriceCents      Int
  totalValueCents     Int
  reasonCategory      String
  reasonDetail        String?
  batchNumber         String?
  manufactureDate     DateTime?
  condition           String?
  inspectionNotes     String?
  inspectedBy         String?
  inspectedAt         DateTime?
  resolution          String?
  resolutionNotes     String?
  resolvedAt          DateTime?
  createdAt           DateTime    @default(now())
  
 
  @@index([returnId])
  @@index([productId])
  @@map("return_items")
}

// Additional tables from your DB

model DailyMetrics {
  id            String   @id @default(cuid())
  date          DateTime
  channelId     String
  revenueCents  Int
  orders        Int
  visitors      Int?
  conversionPct Float?
  aovCents      Int?
  
  @@unique([date, channelId])
  @@map("daily_metrics")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  companyName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("users")
}
model Predictions {
  id               String   @id @default(cuid())
  date             DateTime
  predictedRevenue Int
  confidence       Float
  modelType        String
  modelVersion     String?
  actualRevenue    Int?
  createdAt        DateTime @default(now())
  
  @@map("predictions")
}
// Add these models to your existing schema.prisma file

// 1. Enhanced Suppliers table
model Supplier {
  id                String           @id @default(cuid())
  companyName       String
  contactName       String?
  email             String
  phone             String?
  address           String?
  country           String?
  currency          String           @default("USD")
  paymentTerms      String?          // e.g., "Net 30", "Net 60"
  leadTimeDays      Int              @default(7)
  minimumOrderValue Decimal?         @db.Decimal(10, 2)
  discountTiers     Json?            // JSON array of discount tiers
  rating            Float?           @default(5.0)
  notes             String?          @db.Text
  bankDetails       String?
  taxId             String?
  contractEndDate   DateTime?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  products          SupplierProduct[]
  purchaseOrders    PurchaseOrder[]
  
  @@map("suppliers")
}
// 2. Supplier Products (price lists)
model SupplierProduct {
  id                String    @id @default(cuid())
  supplierId        String
  productId         String
  supplierSku       String?
  costPerUnit       Decimal   @db.Decimal(10, 2)
  moq               Int       @default(1) // Minimum Order Quantity
  leadTimeOverride  Int?      // Override supplier's default lead time
  bulkPricingJson   Json?     // Tiered pricing structure
  validFrom         DateTime  @default(now())
  validUntil        DateTime?
  isPreferred       Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  supplier          Supplier  @relation(fields: [supplierId], references: [id])
  product           Product   @relation(fields: [productId], references: [id])
  
  @@unique([supplierId, productId])
 @@index([supplierId])
  @@index([productId])
}

// 3. Purchase Orders
model PurchaseOrder {
  id               String         @id @default(cuid())
  orderNumber      String         @unique  // This is what the DB expects
  poNumber         String?        // This is optional in DB
  supplierId       String
  status           POStatus       @default(DRAFT)
  orderDate        DateTime?      @default(now())
  expectedDate     DateTime?
  shipDate         DateTime?
  receivedDate     DateTime?
  paymentStatus    PaymentStatus  @default(PENDING)
  paymentDate      DateTime?
  subtotal         Decimal        @db.Decimal(10, 2)
  freightCost      Decimal?       @db.Decimal(10, 2)
  insuranceCost    Decimal?       @db.Decimal(10, 2)
  customsDuty      Decimal?       @db.Decimal(10, 2)
  otherFees        Decimal?       @db.Decimal(10, 2)
  totalCost        Decimal        @db.Decimal(10, 2)
  currency         String         @default("USD")
  exchangeRate     Decimal?       @db.Decimal(10, 6)
  shippingMethod   String?
  trackingNumber   String?
  invoiceNumber    String?
  notes            String?        @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  supplier         Supplier       @relation(fields: [supplierId], references: [id])
  items            POItem[]
  movements        InventoryMovement[]
  
  @@map("purchase_orders")
}
// 4. PO Line Items
model POItem {
  id                   String    @id @default(cuid())
  poId                 String
  productId            String
  supplierSku          String?
  quantityOrdered      Int
  quantityReceived     Int       @default(0)
  quantityRejected     Int       @default(0)
  unitCost             Decimal   @db.Decimal(10, 2)
  freightAllocation    Decimal?  @db.Decimal(10, 2)
  dutyAllocation       Decimal?  @db.Decimal(10, 2)
  otherCostAllocation  Decimal?  @db.Decimal(10, 2)
  landedUnitCost       Decimal?  @db.Decimal(10, 2)
  expectedDate         DateTime?
  receivedDate         DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  purchaseOrder        PurchaseOrder @relation(fields: [poId], references: [id])
  product              Product       @relation(fields: [productId], references: [id])
  batches              InventoryBatch[]

 @@map("purchase_order_items")  // Add this line
}

// 5. Inventory Locations
model Location {
  id                  String         @id @default(cuid())
  name                String
  type                LocationType
  address             String?
  manager             String?
  phone               String?
  capacityUnits       Int?
  capacityCubicMeters Decimal?       @db.Decimal(10, 2)
  operatingCostMonthly Decimal?      @db.Decimal(10, 2)
  isActive            Boolean        @default(true)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  
  // Relations
  batches             InventoryBatch[]
  stockCounts         StockCount[]
  reorderRules        ReorderRule[]
  movementsFrom       InventoryMovement[] @relation("FromLocation")
  movementsTo         InventoryMovement[] @relation("ToLocation")
}

// 6. Inventory Batches (for lot/batch tracking)
model InventoryBatch {
  id                 String        @id @default(cuid())
  productId          String
  locationId         String
  poItemId           String?
  batchNumber        String?
  lotNumber          String?
  quantityReceived   Int
  quantityAvailable  Int
  quantityReserved   Int           @default(0)
  quantityQuarantine Int           @default(0)
  unitCost           Decimal       @db.Decimal(10, 2)
  landedCost         Decimal?      @db.Decimal(10, 2)
  receivedDate       DateTime      @default(now())
  expiryDate         DateTime?
  qualityCheckStatus QCStatus      @default(PENDING)
  qualityNotes       String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  
  // Relations
  product            Product       @relation(fields: [productId], references: [id])
  location           Location      @relation(fields: [locationId], references: [id])
  poItem             POItem?       @relation(fields: [poItemId], references: [id])
  movements          InventoryMovement[]
  
  @@index([batchNumber])
  @@index([expiryDate])
}

// 7. Inventory Movements (audit trail)
model InventoryMovement {
  id            String        @id @default(cuid())
  productId     String
  batchId       String?
  locationFrom  String?
  locationTo    String?
  movementType  MovementType
  quantity      Int
  reason        String?
  referenceType String?       // 'order', 'po', 'adjustment', 'transfer'
  referenceId   String?       // ID of related order/PO/etc
  costImpact    Decimal?      @db.Decimal(10, 2)
  createdBy     String?
  createdAt     DateTime      @default(now())
  
  // Relations
  product       Product       @relation(fields: [productId], references: [id])
  batch         InventoryBatch? @relation(fields: [batchId], references: [id])
  fromLocation  Location?     @relation("FromLocation", fields: [locationFrom], references: [id])
  toLocation    Location?     @relation("ToLocation", fields: [locationTo], references: [id])
  purchaseOrder PurchaseOrder? @relation(fields: [referenceId], references: [id])
  
  @@index([createdAt])
  @@index([movementType])
}

// 8. Stock Counts (for physical inventory)
model StockCount {
  id            String         @id @default(cuid())
  locationId    String
  countDate     DateTime       @default(now())
  status        CountStatus    @default(IN_PROGRESS)
  countedBy     String?
  approvedBy    String?
  varianceUnits Int?
  varianceValue Decimal?       @db.Decimal(10, 2)
  notes         String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  location      Location       @relation(fields: [locationId], references: [id])
  items         StockCountItem[]
}

// 9. Stock Count Items
model StockCountItem {
  id              String      @id @default(cuid())
  stockCountId    String
  productId       String
  expectedQty     Int
  countedQty      Int
  varianceQty     Int
  notes           String?
  createdAt       DateTime    @default(now())
  
  // Relations
  stockCount      StockCount  @relation(fields: [stockCountId], references: [id])
  product         Product     @relation(fields: [productId], references: [id])
}

// 10. Reorder Rules
model ReorderRule {
  id               String    @id @default(cuid())
  productId        String
  locationId       String?
  minStock         Int
  maxStock         Int
  reorderPoint     Int
  reorderQuantity  Int
  leadTimeDays     Int       @default(7)
  safetyStockDays  Int       @default(3)
  seasonalityFactor Decimal? @db.Decimal(3, 2) // 1.5 = 50% increase
  isActive         Boolean   @default(true)
  lastReviewed     DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  product          Product   @relation(fields: [productId], references: [id])
  location         Location? @relation(fields: [locationId], references: [id])
  
  @@unique([productId, locationId])
}
