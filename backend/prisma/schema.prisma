// backend/prisma/schema.prisma - FINAL FIXED VERSION

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  products  Product[]
  
  @@map("channels")
}

model Product {
  id                String    @id @default(cuid())
  channelId         String
  channel           Channel   @relation(fields: [channelId], references: [id])
  channelRef        String?
  sku               String
  title             String
  active            Boolean   @default(true)
  priceCents        Int?
  currency          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Inventory fields from your DB
  leadTimeDays      Int?      @default(30)
  moq               Int?      @default(100)
  batchSize         Int?      @default(50)
  safetyStockDays   Int?      @default(14)
  supplierName      String?
  supplierCountry   String?   @default("China")
  shippingMethod    String?   @default("Sea")
  
  inventory         Inventory?
  orderItems        OrderItem[]
  returnItems       ReturnItem[]
  
  @@unique([channelId, sku])
  @@index([sku])
  @@index([channelId])
  @@map("products")
}

model Order {
  id            String    @id @default(cuid())
  channelId     String
  channel       Channel   @relation(fields: [channelId], references: [id])
  channelRef    String
  number        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currency      String
  subtotalCents Int
  taxCents      Int
  shippingCents Int
  totalCents    Int
  customerEmail String?
  
  items         OrderItem[]
  returns       Return[]
  
  @@unique([channelId, channelRef])
  @@index([channelRef])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  sku         String?
  title       String
  quantity    Int
  priceCents  Int
  totalCents  Int
  
  returnItems ReturnItem[]
  
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Inventory {
  id                  String    @id @default(cuid())
  productId           String    @unique
  product             Product   @relation(fields: [productId], references: [id])
  quantity            Int       @default(0)
  updatedAt           DateTime  @updatedAt
  createdAt           DateTime  @default(now())
  
  // Map snake_case DB columns to camelCase for easier use in code
  available           Int?      @default(0) @map("available_quantity")
  reserved            Int?      @default(0) @map("reserved_quantity")
  incoming            Int?      @default(0) @map("incoming_quantity")
  reorderPoint        Int?      @default(20) @map("reorder_point")
  reorderQuantity     Int?      @default(100) @map("reorder_quantity")
  leadTimeDays        Int?      @default(7) @map("lead_time_days")
  safetyStock         Int?      @default(10) @map("safety_stock")
  lastRestockDate     DateTime? @map("last_restock_date")
  nextRestockDate     DateTime? @map("next_restock_date")
  minOrderQuantity    Int?      @default(1) @map("min_order_quantity")
  maxStockLevel       Int?      @map("max_stock_level")
  notes               String?
  
  @@index([productId])
  @@map("inventory")
}

model Return {
  id                       String      @id @default(cuid())
  returnNumber             String      @unique
  orderId                  String
  order                    Order       @relation(fields: [orderId], references: [id])
  channelId                String
  customerEmail            String?
  status                   String      @default("pending")
  totalReturnValueCents    Int         @default(0)
  refundAmountCents        Int?
  restockingFeeCents       Int         @default(0)
  returnShippingCostCents  Int         @default(0)
  returnlabelcostcents     Int         @default(0) @map("returnlabelcostcents")
  createdAt                DateTime    @default(now())
  approvedAt               DateTime?
  completedAt              DateTime?
  createdBy                String?
  approvedBy               String?
  notes                    String?
  totalActualLossCents  Int?     @default(0)  // Add this line
  
  items                    ReturnItem[]
  
  @@index([orderId])
  @@index([channelId])
  @@index([status])
  @@map("returns")
}

model ReturnItem {
  id                  String      @id @default(cuid())
  returnId            String
  return              Return      @relation(fields: [returnId], references: [id])
  orderItemId         String?
  orderItem           OrderItem?  @relation(fields: [orderItemId], references: [id])
  productId           String?
  product             Product?    @relation(fields: [productId], references: [id])
  sku                 String
  productTitle        String
  quantityReturned    Int
  quantityRestockable Int         @default(0)
  quantityDamaged     Int         @default(0)
  unitPriceCents      Int
  totalValueCents     Int
  reasonCategory      String
  reasonDetail        String?
  batchNumber         String?
  manufactureDate     DateTime?
  condition           String?
  inspectionNotes     String?
  inspectedBy         String?
  inspectedAt         DateTime?
  resolution          String?
  resolutionNotes     String?
  resolvedAt          DateTime?
  createdAt           DateTime    @default(now())
  
 
  @@index([returnId])
  @@index([productId])
  @@map("return_items")
}

// Additional tables from your DB

model DailyMetrics {
  id            String   @id @default(cuid())
  date          DateTime
  channelId     String
  revenueCents  Int
  orders        Int
  visitors      Int?
  conversionPct Float?
  aovCents      Int?
  
  @@unique([date, channelId])
  @@map("daily_metrics")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  companyName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("users")
}

model Supplier {
  id            String   @id @default(cuid())
  name          String
  code          String?
  contactName   String?  @map("contact_name")
  email         String?
  phone         String?
  address       String?
  website       String?
  leadTimeDays  Int?     @default(7) @map("lead_time_days")
  paymentTerms  String?  @map("payment_terms")
  notes         String?
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@map("suppliers")
}

model Predictions {
  id               String   @id @default(cuid())
  date             DateTime
  predictedRevenue Int
  confidence       Float
  modelType        String
  modelVersion     String?
  actualRevenue    Int?
  createdAt        DateTime @default(now())
  
  @@map("predictions")
}
