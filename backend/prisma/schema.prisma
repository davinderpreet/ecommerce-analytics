// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  companyName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Channel {
  id        String   @id @default(cuid())
  name      String   // 'Shopify' | 'BestBuy'
  code      String   @unique // 'shopify' | 'bestbuy'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
  orders    Order[]

  @@map("channels")
}

model Product {
  id              String   @id @default(cuid())
  channelId       String
  channel         Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelRef      String?  // Shopify product id / Mirakl offer-sku or product-sku
  sku             String   @unique
  title           String
  active          Boolean  @default(true)
  priceCents      Int?     // optional normalized price
  currency        String?  // 'CAD'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  inventory       Inventory?
  orderItems      OrderItem[]

  @@map("products")
}

model Inventory {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int      @default(0)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("inventory")
}

model Order {
  id            String    @id @default(cuid())
  channelId     String
  channel       Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelRef    String    @unique // Shopify order id / Mirakl order id
  number        String?
  createdAt     DateTime
  updatedAt     DateTime  @updatedAt
  currency      String    // 'CAD'
  subtotalCents Int
  taxCents      Int
  shippingCents Int
  totalCents    Int
  customerEmail String?

  items         OrderItem[]

  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     String?
  product       Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  sku           String?
  title         String
  quantity      Int
  priceCents    Int      // unit price
  totalCents    Int      // line total

  @@map("order_items")
}

model DailyMetric {
  id            String   @id @default(cuid())
  date          DateTime @db.Date
  channelId     String
  channel       Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  revenueCents  Int
  orders        Int
  visitors      Int?
  conversionPct Float?   // 0..100
  aovCents      Int?

  @@unique([date, channelId])
  @@map("daily_metrics")
}

model Prediction {
  id               String   @id @default(cuid())
  date             DateTime @db.Date
  predictedRevenue Int      // cents
  confidence       Float    // 0.0..1.0
  modelType        String   // 'arima' | 'lstm' | 'ensemble'
  modelVersion     String?
  actualRevenue    Int?
  createdAt        DateTime @default(now())

  @@map("predictions")
}
