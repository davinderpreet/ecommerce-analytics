// backend/prisma/schema.prisma - Updated with all inventory fields

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------- Core entities ----------

model Channel {
  id           String        @id @default(cuid())
  name         String
  code         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  products     Product[]
  orders       Order[]
  dailyMetrics DailyMetric[]

  @@map("channels")
}

model Product {
  id         String    @id @default(cuid())
  channelId  String
  channel    Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelRef String?
  sku        String    @unique
  title      String
  active     Boolean   @default(true)
  priceCents Int?
  currency   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Inventory management fields
  leadTimeDays    Int?      @default(30)
  moq             Int?      @default(100)
  batchSize       Int?      @default(50)
  safetyStockDays Int?      @default(14)
  supplierName    String?
  supplierCountry String?   @default("China")
  shippingMethod  String?   @default("Sea")

  // Relations
  inventory  Inventory?
  orderItems OrderItem[]

  @@map("products")
}

model Inventory {
  id         String   @id @default(cuid())
  productId  String   @unique
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity   Int      @default(0)
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  @@map("inventory")
}

model Order {
  id            String    @id @default(cuid())
  channelId     String
  channel       Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelRef    String    @unique
  number        String?
  createdAt     DateTime
  updatedAt     DateTime  @updatedAt
  currency      String
  subtotalCents Int
  taxCents      Int
  shippingCents Int
  totalCents    Int
  customerEmail String?

  items         OrderItem[]

  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String?
  product    Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  sku        String?
  title      String
  quantity   Int
  priceCents Int
  totalCents Int

  @@map("order_items")
}

model DailyMetric {
  id            String   @id @default(cuid())
  date          DateTime @db.Date
  channelId     String
  channel       Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  revenueCents  Int
  orders        Int
  visitors      Int?
  conversionPct Float?
  aovCents      Int?

  @@unique([date, channelId])
  @@map("daily_metrics")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  companyName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Prediction {
  id               String   @id @default(cuid())
  date             DateTime @db.Date
  predictedRevenue Int
  confidence       Float
  modelType        String
  modelVersion     String?
  actualRevenue    Int?
  createdAt        DateTime @default(now())

  @@map("predictions")
}
// Add these to your existing schema.prisma file

model Return {
  id                      String    @id @default(cuid())
  returnNumber            String    @unique
  orderId                 String
  order                   Order     @relation(fields: [orderId], references: [id])
  channelId               String
  channel                 Channel   @relation(fields: [channelId], references: [id])
  customerEmail           String?
  status                  String    @default("pending")
  totalReturnValueCents   Int       @default(0)
  refundAmountCents       Int?
  restockingFeeCents      Int       @default(0)
  returnShippingCostCents Int       @default(0)
  createdAt               DateTime  @default(now())
  approvedAt              DateTime?
  completedAt             DateTime?
  createdBy               String?
  approvedBy              String?
  notes                   String?
  
  items                   ReturnItem[]
  
  @@index([status])
  @@index([orderId])
  @@index([createdAt])
  @@map("returns")
}

model ReturnItem {
  id                String    @id @default(cuid())
  returnId          String
  return            Return    @relation(fields: [returnId], references: [id], onDelete: Cascade)
  orderItemId       String?
  orderItem         OrderItem? @relation(fields: [orderItemId], references: [id])
  productId         String?
  product           Product?  @relation(fields: [productId], references: [id])
  sku               String
  productTitle      String
  quantityReturned  Int
  quantityRestockable Int     @default(0)
  quantityDamaged   Int       @default(0)
  unitPriceCents    Int
  totalValueCents   Int
  reasonCategory    String
  reasonDetail      String?
  batchNumber       String?
  manufactureDate   DateTime?
  condition         String?
  inspectionNotes   String?
  inspectedBy       String?
  inspectedAt       DateTime?
  resolution        String?
  resolutionNotes   String?
  resolvedAt        DateTime?
  createdAt         DateTime  @default(now())
  
  @@index([sku])
  @@index([batchNumber])
  @@index([reasonCategory])
  @@map("return_items")
}

model ReturnReason {
  id                String   @id @default(cuid())
  category          String
  code              String   @unique
  description       String
  requiresInspection Boolean @default(false)
  autoApprove       Boolean @default(false)
  isQualityIssue    Boolean @default(false)
  isSupplierFault   Boolean @default(false)
  sortOrder         Int      @default(0)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  
  @@map("return_reasons")
}
